{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"spongebobcase: SPoNgeBOb-CAse cONveRSioN iN PyTHoN A Python library to convert text (and text in objects) to Mocking SpongeBob case and show it off in fun ways. Also available as an R library ( spongebob ) or as a CLI ( spongebobsay ) . Installation. inSTAllATIoN. You can get the LateST StABle VeRsIon of spongebobcase from PyPI: pip install spongebobcase Requires Python 3.6 or higher. Development Version. dEveLoPmEnT VerSIOn. To install the dEveLoPmEnT VerSIOn of this package, get it DirEcTlY fROm gItHuB: pip install -e git+https://github.com/jayqi/spongebob.git#egg=version_subpkg&subdirectory=py-pkg Usage. usAGe. from spongebobcase import tospongebob tospongebob(\"a python library for spongebob-case conversion\") #> 'a PYthOn LIBraRY For sPoNgebOb-CaSe ConVERsiOn' tospongebob([\"try it on anything with strings!\", \"hopefully it will work!\"]) #> ['tRY It ON anYThiNG wIth STRiNgs!', 'hoPeFULlY it Will WoRK!'] from spongebobcase import spongebobsay _ = spongebobsay(\"you can even make magnificent ascii art\") #> ----------------------------------------- #> | YoU CAn eVeN mAKe MAgnIFiCEnT ascII ArT | #> ----------------------------------------- #> \\\\ #> \\\\ * #> * #> ----//------- #> \\..C/--..--/ \\ `A #> (@ ) ( @) \\ \\// |w #> \\ \\ \\---/ #> HGGGGGGG \\ /` #> V `---------`--' #> << << #> ### ### #> Snippets created on 2020-07-09 by the reprexpy package insPIreD bY A twiTTeR CoNVErsaTIon StArtED By @jONgAllOwaY . The author of this package claims no ownership over SpongeBob SquarePants. SpongeBob SquarePants is the creation of Stephen Hillenburg, and its trademark is owned by Viacom International Inc. This package uses SpongeBob under fair use, and this package should only be used for personal, noncommercial purposes.","title":"Home"},{"location":"#spongebobcase-spongebob-case-conversion-in-python","text":"A Python library to convert text (and text in objects) to Mocking SpongeBob case and show it off in fun ways. Also available as an R library ( spongebob ) or as a CLI ( spongebobsay ) .","title":"spongebobcase: SPoNgeBOb-CAse cONveRSioN iN PyTHoN"},{"location":"#installation-installation","text":"You can get the LateST StABle VeRsIon of spongebobcase from PyPI: pip install spongebobcase Requires Python 3.6 or higher.","title":"Installation. inSTAllATIoN."},{"location":"#development-version-development-version","text":"To install the dEveLoPmEnT VerSIOn of this package, get it DirEcTlY fROm gItHuB: pip install -e git+https://github.com/jayqi/spongebob.git#egg=version_subpkg&subdirectory=py-pkg","title":"Development Version. dEveLoPmEnT VerSIOn."},{"location":"#usage-usage","text":"from spongebobcase import tospongebob tospongebob(\"a python library for spongebob-case conversion\") #> 'a PYthOn LIBraRY For sPoNgebOb-CaSe ConVERsiOn' tospongebob([\"try it on anything with strings!\", \"hopefully it will work!\"]) #> ['tRY It ON anYThiNG wIth STRiNgs!', 'hoPeFULlY it Will WoRK!'] from spongebobcase import spongebobsay _ = spongebobsay(\"you can even make magnificent ascii art\") #> ----------------------------------------- #> | YoU CAn eVeN mAKe MAgnIFiCEnT ascII ArT | #> ----------------------------------------- #> \\\\ #> \\\\ * #> * #> ----//------- #> \\..C/--..--/ \\ `A #> (@ ) ( @) \\ \\// |w #> \\ \\ \\---/ #> HGGGGGGG \\ /` #> V `---------`--' #> << << #> ### ### #> Snippets created on 2020-07-09 by the reprexpy package insPIreD bY A twiTTeR CoNVErsaTIon StArtED By @jONgAllOwaY . The author of this package claims no ownership over SpongeBob SquarePants. SpongeBob SquarePants is the creation of Stephen Hillenburg, and its trademark is owned by Viacom International Inc. This package uses SpongeBob under fair use, and this package should only be used for personal, noncommercial purposes.","title":"Usage. usAGe."},{"location":"api-reference/spongebobsay/","text":"spongebobcase.spongebobsay ascii_spongebob ( print_ = True ) Get the ASCII SpongeBob without a speech bubble or message. Parameters: Name Type Description Default print_ bool Whether to print using the print function. Defaults to True. True Returns: Type Description str multiline string containing ASCII SpongeBob Source code in spongebobcase/spongebobsay.py def ascii_spongebob ( print_ : bool = True ) -> str : \"\"\"Get the ASCII SpongeBob without a speech bubble or message. Args: print_ (bool, optional): Whether to print using the `print` function. Defaults to True. Returns: multiline string containing ASCII SpongeBob \"\"\" out = \" \" + _SPONGEBOB_ASCII if print_ : print ( out ) return out spongebobsay ( what , print_ = True , width = None ) Creates an ASCII Mocking SpongeBob with a message in a speech bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Parameters: Name Type Description Default what Any object to display as message required print_ bool whether to print to console using print . Defaults to True. True width Optional[int] Width of message bubble in characters. If None, will use 40 or longest word, whichever is longer. Defaults to None. None Exceptions: Type Description WidthTooSmallError If specified width is less than character length of longest word. Returns: Type Description str multiline string with ASCII rendering Source code in spongebobcase/spongebobsay.py def ascii_func ( what : Any , print_ : bool = True , width : Optional [ int ] = None ) -> str : \"\"\"Creates an ASCII Mocking SpongeBob with a message in a {style} bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Args: what (Any): object to display as message print_ (bool, optional): whether to print to console using `print`. Defaults to True. width (Optional[int], optional): Width of message bubble in characters. If None, will use {default_width} or longest word, whichever is longer. Defaults to None. Raises: WidthTooSmallError: If specified width is less than character length of longest word. Returns: multiline string with ASCII rendering \"\"\" # Get string representation of spongebob-cased object what = str ( tospongebob ( what )) # Get longest word longest_word = get_longest_word ( what ) if width is not None : # If width is specified, validate that it's long enough if width < len ( longest_word ): msg = ( f \"Specified width { width } is less than length of \" f \"longest word { longest_word } ( { len ( longest_word ) } ).\" ) raise WidthTooSmallError ( msg ) else : # Otherwise, set to max between longest word and default width = max (( DEFAULT_WIDTH , len ( longest_word ))) # Split text up into lines by width txt = wrap ( what , width = width ) max_length = max ( map ( len , txt )) # Add the speech bubble left-right boundaries txt = [ \" \" . join ([ left , line . ljust ( max_length ), right ]) for line in txt ] # Add the speech bubble top-bottom boundaries and combine speech_bubble = \" \\n \" . join ( [ \"\" . join ([ \" \" , top * ( max_length + 2 ), \" \" ])] + txt + [ \"\" . join ([ \" \" , bottom * ( max_length + 2 ), \" \" ])] + [ _BUBBLE_TAIL_TEMPLATE . format ( tail , tail )] ) out = \"\" . join ([ speech_bubble , _SPONGEBOB_ASCII ]) if print_ : print ( out ) return out spongebobthink ( what , print_ = True , width = None ) Creates an ASCII Mocking SpongeBob with a message in a thought bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Parameters: Name Type Description Default what Any object to display as message required print_ bool whether to print to console using print . Defaults to True. True width Optional[int] Width of message bubble in characters. If None, will use 40 or longest word, whichever is longer. Defaults to None. None Exceptions: Type Description WidthTooSmallError If specified width is less than character length of longest word. Returns: Type Description str multiline string with ASCII rendering Source code in spongebobcase/spongebobsay.py def ascii_func ( what : Any , print_ : bool = True , width : Optional [ int ] = None ) -> str : \"\"\"Creates an ASCII Mocking SpongeBob with a message in a {style} bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Args: what (Any): object to display as message print_ (bool, optional): whether to print to console using `print`. Defaults to True. width (Optional[int], optional): Width of message bubble in characters. If None, will use {default_width} or longest word, whichever is longer. Defaults to None. Raises: WidthTooSmallError: If specified width is less than character length of longest word. Returns: multiline string with ASCII rendering \"\"\" # Get string representation of spongebob-cased object what = str ( tospongebob ( what )) # Get longest word longest_word = get_longest_word ( what ) if width is not None : # If width is specified, validate that it's long enough if width < len ( longest_word ): msg = ( f \"Specified width { width } is less than length of \" f \"longest word { longest_word } ( { len ( longest_word ) } ).\" ) raise WidthTooSmallError ( msg ) else : # Otherwise, set to max between longest word and default width = max (( DEFAULT_WIDTH , len ( longest_word ))) # Split text up into lines by width txt = wrap ( what , width = width ) max_length = max ( map ( len , txt )) # Add the speech bubble left-right boundaries txt = [ \" \" . join ([ left , line . ljust ( max_length ), right ]) for line in txt ] # Add the speech bubble top-bottom boundaries and combine speech_bubble = \" \\n \" . join ( [ \"\" . join ([ \" \" , top * ( max_length + 2 ), \" \" ])] + txt + [ \"\" . join ([ \" \" , bottom * ( max_length + 2 ), \" \" ])] + [ _BUBBLE_TAIL_TEMPLATE . format ( tail , tail )] ) out = \"\" . join ([ speech_bubble , _SPONGEBOB_ASCII ]) if print_ : print ( out ) return out spongebobwhisper ( what , print_ = True , width = None ) Creates an ASCII Mocking SpongeBob with a message in a whisper bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Parameters: Name Type Description Default what Any object to display as message required print_ bool whether to print to console using print . Defaults to True. True width Optional[int] Width of message bubble in characters. If None, will use 40 or longest word, whichever is longer. Defaults to None. None Exceptions: Type Description WidthTooSmallError If specified width is less than character length of longest word. Returns: Type Description str multiline string with ASCII rendering Source code in spongebobcase/spongebobsay.py def ascii_func ( what : Any , print_ : bool = True , width : Optional [ int ] = None ) -> str : \"\"\"Creates an ASCII Mocking SpongeBob with a message in a {style} bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Args: what (Any): object to display as message print_ (bool, optional): whether to print to console using `print`. Defaults to True. width (Optional[int], optional): Width of message bubble in characters. If None, will use {default_width} or longest word, whichever is longer. Defaults to None. Raises: WidthTooSmallError: If specified width is less than character length of longest word. Returns: multiline string with ASCII rendering \"\"\" # Get string representation of spongebob-cased object what = str ( tospongebob ( what )) # Get longest word longest_word = get_longest_word ( what ) if width is not None : # If width is specified, validate that it's long enough if width < len ( longest_word ): msg = ( f \"Specified width { width } is less than length of \" f \"longest word { longest_word } ( { len ( longest_word ) } ).\" ) raise WidthTooSmallError ( msg ) else : # Otherwise, set to max between longest word and default width = max (( DEFAULT_WIDTH , len ( longest_word ))) # Split text up into lines by width txt = wrap ( what , width = width ) max_length = max ( map ( len , txt )) # Add the speech bubble left-right boundaries txt = [ \" \" . join ([ left , line . ljust ( max_length ), right ]) for line in txt ] # Add the speech bubble top-bottom boundaries and combine speech_bubble = \" \\n \" . join ( [ \"\" . join ([ \" \" , top * ( max_length + 2 ), \" \" ])] + txt + [ \"\" . join ([ \" \" , bottom * ( max_length + 2 ), \" \" ])] + [ _BUBBLE_TAIL_TEMPLATE . format ( tail , tail )] ) out = \"\" . join ([ speech_bubble , _SPONGEBOB_ASCII ]) if print_ : print ( out ) return out","title":"spongebobcase.spongebobsay"},{"location":"api-reference/spongebobsay/#spongebobcasespongebobsay","text":"","title":"spongebobcase.spongebobsay"},{"location":"api-reference/spongebobsay/#spongebobcase.spongebobsay","text":"","title":"spongebobcase.spongebobsay"},{"location":"api-reference/spongebobsay/#spongebobcase.spongebobsay.ascii_spongebob","text":"Get the ASCII SpongeBob without a speech bubble or message. Parameters: Name Type Description Default print_ bool Whether to print using the print function. Defaults to True. True Returns: Type Description str multiline string containing ASCII SpongeBob Source code in spongebobcase/spongebobsay.py def ascii_spongebob ( print_ : bool = True ) -> str : \"\"\"Get the ASCII SpongeBob without a speech bubble or message. Args: print_ (bool, optional): Whether to print using the `print` function. Defaults to True. Returns: multiline string containing ASCII SpongeBob \"\"\" out = \" \" + _SPONGEBOB_ASCII if print_ : print ( out ) return out","title":"ascii_spongebob()"},{"location":"api-reference/spongebobsay/#spongebobcase.spongebobsay.spongebobsay","text":"Creates an ASCII Mocking SpongeBob with a message in a speech bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Parameters: Name Type Description Default what Any object to display as message required print_ bool whether to print to console using print . Defaults to True. True width Optional[int] Width of message bubble in characters. If None, will use 40 or longest word, whichever is longer. Defaults to None. None Exceptions: Type Description WidthTooSmallError If specified width is less than character length of longest word. Returns: Type Description str multiline string with ASCII rendering Source code in spongebobcase/spongebobsay.py def ascii_func ( what : Any , print_ : bool = True , width : Optional [ int ] = None ) -> str : \"\"\"Creates an ASCII Mocking SpongeBob with a message in a {style} bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Args: what (Any): object to display as message print_ (bool, optional): whether to print to console using `print`. Defaults to True. width (Optional[int], optional): Width of message bubble in characters. If None, will use {default_width} or longest word, whichever is longer. Defaults to None. Raises: WidthTooSmallError: If specified width is less than character length of longest word. Returns: multiline string with ASCII rendering \"\"\" # Get string representation of spongebob-cased object what = str ( tospongebob ( what )) # Get longest word longest_word = get_longest_word ( what ) if width is not None : # If width is specified, validate that it's long enough if width < len ( longest_word ): msg = ( f \"Specified width { width } is less than length of \" f \"longest word { longest_word } ( { len ( longest_word ) } ).\" ) raise WidthTooSmallError ( msg ) else : # Otherwise, set to max between longest word and default width = max (( DEFAULT_WIDTH , len ( longest_word ))) # Split text up into lines by width txt = wrap ( what , width = width ) max_length = max ( map ( len , txt )) # Add the speech bubble left-right boundaries txt = [ \" \" . join ([ left , line . ljust ( max_length ), right ]) for line in txt ] # Add the speech bubble top-bottom boundaries and combine speech_bubble = \" \\n \" . join ( [ \"\" . join ([ \" \" , top * ( max_length + 2 ), \" \" ])] + txt + [ \"\" . join ([ \" \" , bottom * ( max_length + 2 ), \" \" ])] + [ _BUBBLE_TAIL_TEMPLATE . format ( tail , tail )] ) out = \"\" . join ([ speech_bubble , _SPONGEBOB_ASCII ]) if print_ : print ( out ) return out","title":"spongebobsay()"},{"location":"api-reference/spongebobsay/#spongebobcase.spongebobsay.spongebobthink","text":"Creates an ASCII Mocking SpongeBob with a message in a thought bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Parameters: Name Type Description Default what Any object to display as message required print_ bool whether to print to console using print . Defaults to True. True width Optional[int] Width of message bubble in characters. If None, will use 40 or longest word, whichever is longer. Defaults to None. None Exceptions: Type Description WidthTooSmallError If specified width is less than character length of longest word. Returns: Type Description str multiline string with ASCII rendering Source code in spongebobcase/spongebobsay.py def ascii_func ( what : Any , print_ : bool = True , width : Optional [ int ] = None ) -> str : \"\"\"Creates an ASCII Mocking SpongeBob with a message in a {style} bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Args: what (Any): object to display as message print_ (bool, optional): whether to print to console using `print`. Defaults to True. width (Optional[int], optional): Width of message bubble in characters. If None, will use {default_width} or longest word, whichever is longer. Defaults to None. Raises: WidthTooSmallError: If specified width is less than character length of longest word. Returns: multiline string with ASCII rendering \"\"\" # Get string representation of spongebob-cased object what = str ( tospongebob ( what )) # Get longest word longest_word = get_longest_word ( what ) if width is not None : # If width is specified, validate that it's long enough if width < len ( longest_word ): msg = ( f \"Specified width { width } is less than length of \" f \"longest word { longest_word } ( { len ( longest_word ) } ).\" ) raise WidthTooSmallError ( msg ) else : # Otherwise, set to max between longest word and default width = max (( DEFAULT_WIDTH , len ( longest_word ))) # Split text up into lines by width txt = wrap ( what , width = width ) max_length = max ( map ( len , txt )) # Add the speech bubble left-right boundaries txt = [ \" \" . join ([ left , line . ljust ( max_length ), right ]) for line in txt ] # Add the speech bubble top-bottom boundaries and combine speech_bubble = \" \\n \" . join ( [ \"\" . join ([ \" \" , top * ( max_length + 2 ), \" \" ])] + txt + [ \"\" . join ([ \" \" , bottom * ( max_length + 2 ), \" \" ])] + [ _BUBBLE_TAIL_TEMPLATE . format ( tail , tail )] ) out = \"\" . join ([ speech_bubble , _SPONGEBOB_ASCII ]) if print_ : print ( out ) return out","title":"spongebobthink()"},{"location":"api-reference/spongebobsay/#spongebobcase.spongebobsay.spongebobwhisper","text":"Creates an ASCII Mocking SpongeBob with a message in a whisper bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Parameters: Name Type Description Default what Any object to display as message required print_ bool whether to print to console using print . Defaults to True. True width Optional[int] Width of message bubble in characters. If None, will use 40 or longest word, whichever is longer. Defaults to None. None Exceptions: Type Description WidthTooSmallError If specified width is less than character length of longest word. Returns: Type Description str multiline string with ASCII rendering Source code in spongebobcase/spongebobsay.py def ascii_func ( what : Any , print_ : bool = True , width : Optional [ int ] = None ) -> str : \"\"\"Creates an ASCII Mocking SpongeBob with a message in a {style} bubble. The message is the string representation of the given input having been converted using [tospongebob][spongebobcase.tospongebob]. Args: what (Any): object to display as message print_ (bool, optional): whether to print to console using `print`. Defaults to True. width (Optional[int], optional): Width of message bubble in characters. If None, will use {default_width} or longest word, whichever is longer. Defaults to None. Raises: WidthTooSmallError: If specified width is less than character length of longest word. Returns: multiline string with ASCII rendering \"\"\" # Get string representation of spongebob-cased object what = str ( tospongebob ( what )) # Get longest word longest_word = get_longest_word ( what ) if width is not None : # If width is specified, validate that it's long enough if width < len ( longest_word ): msg = ( f \"Specified width { width } is less than length of \" f \"longest word { longest_word } ( { len ( longest_word ) } ).\" ) raise WidthTooSmallError ( msg ) else : # Otherwise, set to max between longest word and default width = max (( DEFAULT_WIDTH , len ( longest_word ))) # Split text up into lines by width txt = wrap ( what , width = width ) max_length = max ( map ( len , txt )) # Add the speech bubble left-right boundaries txt = [ \" \" . join ([ left , line . ljust ( max_length ), right ]) for line in txt ] # Add the speech bubble top-bottom boundaries and combine speech_bubble = \" \\n \" . join ( [ \"\" . join ([ \" \" , top * ( max_length + 2 ), \" \" ])] + txt + [ \"\" . join ([ \" \" , bottom * ( max_length + 2 ), \" \" ])] + [ _BUBBLE_TAIL_TEMPLATE . format ( tail , tail )] ) out = \"\" . join ([ speech_bubble , _SPONGEBOB_ASCII ]) if print_ : print ( out ) return out","title":"spongebobwhisper()"},{"location":"api-reference/tospongebob/","text":"spongebobcase.tospongebob tospongebob ( x ) A single-dispatch generic function for converting text in Python objects to Mocking SpongeBob case . The core method for strings will return the input string with converted to Mocking Spongebob case. For other objects, it will attempt to appropriately find contained strings and convert them. Note that this returns new objects and should not be modifying any objects inplace. Parameters: Name Type Description Default x ~T input with text to convert required Returns: Type Description ~T new object of same type with text converted Source code in spongebobcase/tospongebob.py @singledispatch def tospongebob ( x : T ) -> T : \"\"\"A single-dispatch generic function for converting text in Python objects to [Mocking SpongeBob case](https://knowyourmeme.com/memes/mocking-spongebob). The core method for strings will return the input string with converted to Mocking Spongebob case. For other objects, it will attempt to appropriately find contained strings and convert them. Note that this returns new objects and should not be modifying any objects inplace. Args: x: input with text to convert Returns: new object of same type with text converted \"\"\" if hasattr ( x , \"__dict__\" ): x_dict = tospongebob ( x . __dict__ ) x = copy ( x ) x . __dict__ = x_dict return x","title":"spongebobcase.tospongebob"},{"location":"api-reference/tospongebob/#spongebobcasetospongebob","text":"","title":"spongebobcase.tospongebob"},{"location":"api-reference/tospongebob/#spongebobcase.tospongebob","text":"","title":"spongebobcase.tospongebob"},{"location":"api-reference/tospongebob/#spongebobcase.tospongebob.tospongebob","text":"A single-dispatch generic function for converting text in Python objects to Mocking SpongeBob case . The core method for strings will return the input string with converted to Mocking Spongebob case. For other objects, it will attempt to appropriately find contained strings and convert them. Note that this returns new objects and should not be modifying any objects inplace. Parameters: Name Type Description Default x ~T input with text to convert required Returns: Type Description ~T new object of same type with text converted Source code in spongebobcase/tospongebob.py @singledispatch def tospongebob ( x : T ) -> T : \"\"\"A single-dispatch generic function for converting text in Python objects to [Mocking SpongeBob case](https://knowyourmeme.com/memes/mocking-spongebob). The core method for strings will return the input string with converted to Mocking Spongebob case. For other objects, it will attempt to appropriately find contained strings and convert them. Note that this returns new objects and should not be modifying any objects inplace. Args: x: input with text to convert Returns: new object of same type with text converted \"\"\" if hasattr ( x , \"__dict__\" ): x_dict = tospongebob ( x . __dict__ ) x = copy ( x ) x . __dict__ = x_dict return x","title":"tospongebob()"}]}